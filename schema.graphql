## Marketplace 

type MarketItem @entity {
  id: ID!
  collection: collection!
  tokenId: Int!
  seller: Bytes!
  price: BigInt!
  onSale: Boolean!
}


type MarketTransaction @entity {
  id: ID!
  collection: collection!
  tokenId: ID!
  seller: Bytes!
  buyer: Bytes
  price: BigInt!
  timestamp: Int!
  block: Int!
  event: String!
}

## 721-Marketplace
type contract @entity {
	id:                           ID!
	asERC721:                     collection
}

type account @entity {
	" the wallet address "
	id: ID!

	" The NFTs owned by this account "
	tokens: [token!]! @derivedFrom(field: "owner")
	
	" The transfers originating from this account "
	transfersFrom: [transfer!]! @derivedFrom(field: "senderAddress")
	
	" The transfers recevied by this account"
	transfersTo:   [transfer!]! @derivedFrom(field: "receiverAddress")

    " M:M relationship for Accounts and Collections "
	accountCollection: [accountCollection!]! @derivedFrom(field: "account")
}

"replaces TokenRegistry"
type collection @entity {

    " The address of the collection "
    id: ID!
    
    " The name of the collection "
    name: String
	
    " The symbol for the collection "
    symbol: String

    " Total Supply of Tokens "
    totalSupply: BigInt

    " Mint Price "
    mintPrice: BigDecimal

    " Tokens for the collection"
    tokens: [token!]! @derivedFrom(field: "collection")

    " Collection supports metadata "
    supportsMetadata: Boolean

    " Total sales "
    totalSales: Int!
		
    " Total volume "
    totalVolume: BigDecimal!
    
    " Top Sale ever "
    topSale: BigDecimal!

    " Hourly info about the collection "
    hourlyCollectionSnapshot:   [hourlyCollectionSnapshot!]!   @derivedFrom(field: "collection") 
    
    " Daily info about the collection "
    dailyCollectionSnapshot:   [dailyCollectionSnapshot!]!   @derivedFrom(field: "collection") 

     " Weekly info about the collection "
    weeklyCollectionSnapshot:   [weeklyCollectionSnapshot!]!   @derivedFrom(field: "collection") 

    " M:M relationship for Accounts and Collections "
	accountCollection: [accountCollection!]! @derivedFrom(field: "collection")
    
}
type Attribute @entity {
    id: String!
    trait_type: String!
    value: String!
}
type token @entity {

    " Collection Addrress / Token Id "
    id: ID!  

    " The collection address "
    collection: collection!

    " The id of the NFT"
    identifier: BigInt!

	" The address the currently owns the token "
	owner: account 

	" Transfers involving this token "
	transfers: [transfer!]! @derivedFrom(field: "token")

    " uri of the token metadata "
    uri: String!

    " uri of the image of this token "
    image: String

    " if exist, name of the token "
    name : String

    " if exist, attributes of the nft "
    traits: [Attribute!]
    

    " if exist, description of the token "
    description: String 

    " if exist, creator address "
    creator: String

}


type accountCollection @entity {
    " Account Id - Collection Id "
    id: ID!

    " Address of the account "
    account: account 

    " Address of the NFT Collection "
    collection: collection 

    " Count of NFT's owned in a collection by the Address"
    tokenCount: Int!

}

type transaction @entity {
  " the hash of the tx"
  id: ID!
  
  " Timestamp for block "
  timestamp: Int!
  
  " Block Number "
  blockNumber:	Int!

  " Address who initiated the transaction "
  transactionFrom: Bytes! 
  
  " Count of how many transfers were not matched to a sale "
  unmatchedTransferCount: Int!   

  " Transfers that occured within the transaction "
  transfers: [transfer!]! 

  " Sale events that occured within the transaction "
  sales: [sale!] @derivedFrom(field: "transaction")

  " Gas Spent "
  gasPrice: BigInt

}

type transfer @entity {

    " Block Number and Event Id in which the transfers event occured"
    id: ID!
    
	" Transaction hash in which the transfer event occured"
	transaction: transaction!

    " The collection address "
    collection: collection!
    
    " The collection addrress - The token id "
    token: token!
    
	" The sender address "
    senderAddress: account
    
    " The receiver address "
    receiverAddress: account
    
    " Timestamp for block "
    timestamp: Int!

    " Block Number "
    blockNumber: Int!

	" The amount of ETH paid"
    amount: BigDecimal!

	" matched sale event for the transfer "
	matchedSale: sale 
        
}

type sale @entity {
  " Block Number and Event Id in which the sale event occured"
  id: ID!
  
  " tx that the sale occured in "
  transaction: transaction!

  " Timestamp for block "
  timestamp: Int!

  " Block Number "
  blockNumber: Int!

  " the amount of the sale "
  amount: BigDecimal!
  
  collection: collection!
  tokenId: Int!
  seller: Bytes!
  buyer: Bytes!
  fee: BigInt!

}



type hourlyCollectionSnapshot @entity {

    " The collection address - The hour "
    id: ID!
    
    " Unix Hour (Timestamp / 3600 * 3600) "
    timestamp: Int
    
    " The collection address " 
    collection: collection!
    
    " The hourly volume "
    hourlyVolume: BigDecimal!
    
    " Number of hourly transactions "
    hourlyTransactions: Int

    " Average sale amount for the day "
    hourlyAvgSale: BigDecimal!
    
    " Hourly top sales "
    topSale: BigDecimal!
    
    " Hourly bottom sales "
    bottomSale: BigDecimal!

}

type dailyCollectionSnapshot @entity {

    " The collection address - The day "
    id: ID!
    
    " Unix Day (Timestamp / 86400 * 86400) "
    timestamp: Int
    
    " The collection address " 
    collection: collection!
    
    " The daily volume "
    dailyVolume: BigDecimal!
    
    " Number of daily transactions "
    dailyTransactions: Int

    " Average sale amount for the day "
    dailyAvgSale: BigDecimal!
    
    " Daily top sales "
    topSale: BigDecimal!
    
    " Daily bottom sales "
    bottomSale: BigDecimal!

}

type weeklyCollectionSnapshot @entity {

    " The collection address - The week "
    id: ID!
    
    " Unix Week (Timestamp / 604800 * 604800) "
    timestamp: Int
    
    " The collection address " 
    collection: collection!
    
    " The monthly volume "
    weeklyVolume: BigDecimal!
    
    " Number of monthly transactions "
    weeklyTransactions: Int

    " Average sale amount for the day "
    weeklyAvgSale: BigDecimal!
    
    " Weekly top sales "
    topSale: BigDecimal!
    
    " Weekly bottom sales "
    bottomSale: BigDecimal!

}



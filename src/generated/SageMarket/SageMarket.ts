// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelMarketItem extends ethereum.Event {
  get params(): CancelMarketItem__Params {
    return new CancelMarketItem__Params(this);
  }
}

export class CancelMarketItem__Params {
  _event: CancelMarketItem;

  constructor(event: CancelMarketItem) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get onSale(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class CreateMarketItem extends ethereum.Event {
  get params(): CreateMarketItem__Params {
    return new CreateMarketItem__Params(this);
  }
}

export class CreateMarketItem__Params {
  _event: CreateMarketItem;

  constructor(event: CreateMarketItem) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get onSale(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class CreateMarketSale extends ethereum.Event {
  get params(): CreateMarketSale__Params {
    return new CreateMarketSale__Params(this);
  }
}

export class CreateMarketSale__Params {
  _event: CreateMarketSale;

  constructor(event: CreateMarketSale) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get onSale(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class SageMarket__fetchAllMarketItemResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get onSale(): boolean {
    return this[6].toBoolean();
  }
}

export class SageMarket__fetchMarketItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get onSale(): boolean {
    return this[6].toBoolean();
  }
}

export class SageMarket__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get onSale(): boolean {
    return this[6].toBoolean();
  }
}

export class SageMarket__getMarketItemResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get onSale(): boolean {
    return this[6].toBoolean();
  }
}

export class SageMarket extends ethereum.SmartContract {
  static bind(address: Address): SageMarket {
    return new SageMarket("SageMarket", address);
  }

  checkRoyalties(_contract: Address): boolean {
    let result = super.call(
      "checkRoyalties",
      "checkRoyalties(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_checkRoyalties(_contract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRoyalties",
      "checkRoyalties(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fetchAllMarketItem(
    itemId: BigInt
  ): SageMarket__fetchAllMarketItemResultValue0Struct {
    let result = super.call(
      "fetchAllMarketItem",
      "fetchAllMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return changetype<SageMarket__fetchAllMarketItemResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fetchAllMarketItem(
    itemId: BigInt
  ): ethereum.CallResult<SageMarket__fetchAllMarketItemResultValue0Struct> {
    let result = super.tryCall(
      "fetchAllMarketItem",
      "fetchAllMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SageMarket__fetchAllMarketItemResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  fetchMarketItems(): Array<SageMarket__fetchMarketItemsResultValue0Struct> {
    let result = super.call(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      SageMarket__fetchMarketItemsResultValue0Struct
    >();
  }

  try_fetchMarketItems(): ethereum.CallResult<
    Array<SageMarket__fetchMarketItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<SageMarket__fetchMarketItemsResultValue0Struct>()
    );
  }

  fetchMyNFTs(): Array<SageMarket__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<SageMarket__fetchMyNFTsResultValue0Struct>();
  }

  try_fetchMyNFTs(): ethereum.CallResult<
    Array<SageMarket__fetchMyNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<SageMarket__fetchMyNFTsResultValue0Struct>()
    );
  }

  getMarketItem(
    marketItemId: BigInt
  ): SageMarket__getMarketItemResultValue0Struct {
    let result = super.call(
      "getMarketItem",
      "getMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(marketItemId)]
    );

    return changetype<SageMarket__getMarketItemResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarketItem(
    marketItemId: BigInt
  ): ethereum.CallResult<SageMarket__getMarketItemResultValue0Struct> {
    let result = super.tryCall(
      "getMarketItem",
      "getMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(marketItemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SageMarket__getMarketItemResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelSaleCall extends ethereum.Call {
  get inputs(): CancelSaleCall__Inputs {
    return new CancelSaleCall__Inputs(this);
  }

  get outputs(): CancelSaleCall__Outputs {
    return new CancelSaleCall__Outputs(this);
  }
}

export class CancelSaleCall__Inputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSaleCall__Outputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }
}

export class CreateMarketItemCall extends ethereum.Call {
  get inputs(): CreateMarketItemCall__Inputs {
    return new CreateMarketItemCall__Inputs(this);
  }

  get outputs(): CreateMarketItemCall__Outputs {
    return new CreateMarketItemCall__Outputs(this);
  }
}

export class CreateMarketItemCall__Inputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateMarketItemCall__Outputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}
